name: openGL Test

on:
  workflow_dispatch:

jobs:
  build-and-upload:
    runs-on: windows-latest

    steps:
    # 1. 저장소 코드 체크아웃
    - name: Checkout
      uses: actions/checkout@v4.2.2

    # 2. Mesa3D 설치 (OpenGL 소프트웨어 렌더링)
    # - name: Install Mesa
    #   shell: cmd
    #   run: |
    #     curl.exe -L --output mesa.7z --url https://github.com/pal1000/mesa-dist-win/releases/download/20.3.2/mesa3d-20.3.2-release-msvc.7z
    #     "C:\Program Files\7-Zip\7z.exe" x mesa.7z
    #     set PATH=%CD%\x64;%PATH%

    - name: Install Mesa
      run: |
        curl.exe -L --output mesa.7z --url https://github.com/pal1000/mesa-dist-win/releases/download/20.3.2/mesa3d-20.3.2-release-msvc.7z
        "C:\Program Files\7-Zip\7z.exe" x mesa.7z
        mklink /D C:\Windows\System32\opengl32.dll "x64\opengl32.dll"
        mklink /D C:\Windows\System32\libglapi.dll "x64\libglapi.dll"
      shell: cmd

    - name: Check Dir
      run: |
        dir C:\Windows\System32\
      shell: cmd

    # 3. Kivy GL Backend 설정
    - name: Set Kivy GL Backend
      run: set KIVY_GL_BACKEND=angle_sdl2

    # 4. Python 환경 설정
    - name: Setup Python
      uses: actions/setup-python@v5.3.0
      with:
        python-version: 3.12.4

    # 5. pyopengl과 pygame 설치
    - name: Install pyopengl and pygame
      run: |
        pip install pyopengl pygame

    # 6. OpenGL 버전 확인
    - name: Check OpenGL Version with Pygame and Mesa
      run: |
        python -c "
        import os
        import pygame
        os.environ['PATH'] = os.getcwd() + '\\x64;' + os.environ['PATH']
        pygame.init()
        display = pygame.display.set_mode((1, 1), pygame.OPENGL)
        from OpenGL.GL import glGetString, GL_VERSION
        print('OpenGL Version:', glGetString(GL_VERSION).decode())
        "
