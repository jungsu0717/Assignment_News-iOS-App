name: openGL Test

on:
  # main branch PR 시 실행
  # pull_request:
  #     branches:
  #       - main

  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-and-upload:
    runs-on: windows-latest
    permissions:
      packages: write
      contents: write
      id-token: write 

    steps:
    # 1. 저장소 코드 체크아웃
    - name: Checkout
      uses: actions/checkout@v4.2.2

    # Miniconda 설치 및 uivat 환경 구축
    - name: Setup miniconda
      uses: conda-incubator/setup-miniconda@v3
      with:
        miniconda-version: "latest"
        activate-environment: uivat
        python-version: 3.12.4
     
    # Conda 설치 확인
    - name: Verify conda
      shell: powershell
      run: |
        conda list

    # 2. Mesa3D 설치 (Kivy는 openGL 2.0 이상 환경에서 빌드가 가능하지만 가상환경에서는 1.1 버전을 제공하므로, OpenGL 소프트웨어 렌더링 추가)
    - name: Install Mesa
      shell: cmd
      run: |
        curl.exe -L --output mesa.7z --url https://github.com/pal1000/mesa-dist-win/releases/download/20.3.2/mesa3d-20.3.2-release-msvc.7z
        "C:\Program Files\7-Zip\7z.exe" x mesa.7z

    # echo PATH=%CD%\x64;%PATH% >> %GITHUB_ENV%
    # 3. Mesa3D 적용 (가상환경 openGL 대체 적용과 path 설정)
    - name: Apply Mesa
      shell: cmd
      run: |
        takeown /F C:\Windows\System32\opengl32.dll
        icacls C:\Windows\System32\opengl32.dll /grant:r "%USERNAME%:F"
        del C:\Windows\System32\opengl32.dll
        mklink C:\Windows\System32\opengl32.dll "x64\opengl32.dll"
    
        takeown /F C:\Windows\System32\libglapi.dll
        icacls C:\Windows\System32\libglapi.dll /grant:r "%USERNAME%:F"
        del C:\Windows\System32\libglapi.dll
        mklink C:\Windows\System32\libglapi.dll "x64\libglapi.dll"


    # 5. 의존성 설치
    - name: Install dependencies
      shell: powershell
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
        conda list
        
    # 4. Python 코드 작성
    - name: Create Python script
      run: |
        echo "def main():" > main.py
        echo "    print('Hello from GitHub Actions!')" >> main.py
        echo "if __name__ == '__main__':" >> main.py
        echo "    main()" >> main.py

    - name: Check pyinstaller path
      shell: powershell
      run: |
        where.exe pyinstaller
        
    # 6. App 빌드 및 패키징
    - name: Build executable
      shell: powershell
      run: |
        conda list
        pyinstaller --onefile main.py

    # 7. zip 으로 압축
    - name: Compress 'dist' directory into a zip
      shell: powershell
      run: |
        conda list
        Compress-Archive -Path dist\* -DestinationPath uivat.zip

        

    # - name: Create a folder and compress it into a ZIP
    #   shell: powershell
    #   run: |
    #     conda list
    #     ls
    #     cd
    #     dir
    #     mkdir myfolder
    #     echo "This is file 1" > myfolder/file1.txt
    #     echo "This is file 2" > myfolder/file2.txt

    # - name: Compress files into a ZIP
    #   shell: powershell
    #   run: |
    #     conda list
    #     ls
    #     cd
    #     dir
    #     Compress-Archive -Path myfolder\* -DestinationPath uivat.zip

    # - name: Verify ZIP file
    #   shell: powershell
    #   run: |
    #     ls -lh uivat.zip
    #     unzip -l uivat.zip
    
    # 2. Bump version and push the tag
    - name: Bump version and push tag
      id: tag_version
      uses: mathieudutour/github-tag-action@v6.1
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}

    # body:  |
    # ## What's Changed
    # ${{ steps.tag_version.outputs.changelog }}
    # ---
    # ${{ steps.tag_version.outputs.changelog }}
    # 7. Github release 생성
    - name: Create GitHub release
      id: create_release
      uses: ncipollo/release-action@v1
      with:
        tag: ${{ steps.tag_version.outputs.new_tag }}
        name: uivat_${{ steps.tag_version.outputs.new_tag }}
        artifacts: "uivat.zip"
        generateReleaseNotes: true
   
    # - name: Create GitHub release in dist repo
    #   id: create_release_dist_repo
    #   uses: ncipollo/release-action@v1
    #   with:
    #     tag: ${{ steps.tag_version.outputs.new_tag }}
    #     name: uivat_${{ steps.tag_version.outputs.new_tag }}
    #     artifacts: "uivat.zip"
    #     generateReleaseNotes: true
    #     repo: dist_repository
    #     token: ${{ secrets.ACTIONS_PAT }}     
    
    # # 8. 빌드 결과 업로드
    # - name: Upload release assets
    #   id: upload-release-assets
    #   uses: svenstaro/upload-release-action@v2
    #   with:
    #     repo_token: ${{ secrets.GITHUB_TOKEN }}
    #     file: ./uivat.zip
    #     asset_name: uivat.zip
    #     tag: ${{ steps.tag_version.outputs.new_tag }}
    #     overwrite: true
    #     release_name: Test v${{ steps.tag_version.outputs.new_tag }}
    #     body: |
    #       ## What's Changed
    #       ${{ steps.tag_version.outputs.changelog }}
    #       ---
    #       ${{ steps.tag_version.outputs.changelog }}


    
    # - name: Upload release assets to dist repo
    #   id: upload_release_assets_dist_repo
    #   uses: svenstaro/upload-release-action@v2
    #   with:
    #     repo_name: jungsu0717/dist_repository
    #     repo_token: ${{ secrets.ACTIONS_PAT }}
    #     file: ./uivat.zip
    #     asset_name: uivat.zip
    #     tag: ${{ steps.tag_version.outputs.new_tag }}
